package core.view;

import core.model.entity.Plane;
import core.model.entity.Flight;
import core.model.entity.Passenger;
import core.model.entity.Location;
import core.controller.controllers.FlightController;
import core.controller.controllers.LocationController;
import core.controller.controllers.PassengerController;
import core.controller.controllers.PlaneController;
import core.controller.utils.Response;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author edangulo
 */
public class AirportFrame extends javax.swing.JFrame {

    /**
     * Creates new form AirportFrame
     */
    private int x, y;
    private ArrayList<Passenger> passengers;
    private ArrayList<Plane> planes;
    private ArrayList<Location> locations;
    private ArrayList<Flight> flights;

    // Si inyectan los controladores al frame
    private final PlaneController planeController;
    private final LocationController locationController;
    private final PassengerController passengerController;
    private final FlightController flightController;

    public AirportFrame(PlaneController planeController,
            LocationController locationController,
            PassengerController passengerController,
            FlightController flightController) {
        initComponents();

        this.planeController = planeController;
        this.locationController = locationController;
        this.passengerController = passengerController;
        this.flightController = flightController;

        this.passengers = new ArrayList<>();
        this.planes = new ArrayList<>();
        this.locations = new ArrayList<>();
        this.flights = new ArrayList<>();

        this.setBackground(new Color(0, 0, 0, 0));
        this.setLocationRelativeTo(null);

        this.generateMonths();
        this.generateDays();
        this.generateHours();
        this.generateMinutes();
        this.blockPanels();

        for (int i = 1; i < jTabbedPanel1.getTabCount(); i++) {
            jTabbedPanel1.setEnabledAt(i, false);
        }

        loadPassengersTable();
        updateUserComboBox();
        loadFlightsTable();
        updateFlightComboBox();
        loadPlanesTable();
        updatePlaneComboBox();
        loadLocationsTable();
        updateLocationComboBox();
        loadMyFlightsTable(comboUserSelect.getSelectedItem().toString());
        updateTextFieldsFromCombo();
        comboUserSelect.enable(false);
    }

    private void blockPanels() {
        //9, 11
        for (int i = 1; i < jTabbedPanel1.getTabCount(); i++) {
            if (i != 9 && i != 11) {
                jTabbedPanel1.setEnabledAt(i, false);
            }
        }
    }

    private void generateMonths() {
        for (int i = 1; i < 13; i++) {
            comboBirthMonth.addItem("" + i);
            comboxDepartureMonthFlight.addItem("" + i);
            MONTH5.addItem("" + i);
        }
    }

    private void generateDays() {
        for (int i = 1; i < 32; i++) {
            comboBirthDay.addItem("" + i);
            comboxDepartureDayFlight.addItem("" + i);
            DAY5.addItem("" + i);
        }
    }

    private void generateHours() {
        for (int i = 0; i < 24; i++) {
            comboxDepartureHourFlight.addItem("" + i);
            comboxArrivalHourFlight.addItem("" + i);
            comboxScaleHourFlight.addItem("" + i);
            comboHoursDelayFlight.addItem("" + i);
        }
    }

    private void generateMinutes() {
        for (int i = 0; i < 60; i++) {
            comboxDepartureMinuteFlight.addItem("" + i);
            comboxArrivalMinuteFlight.addItem("" + i);
            comboxlScaleMinuteFlight.addItem("" + i);
            comboMinuteDelayFlight.addItem("" + i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelRound1 = new core.view.PanelRound();
        panelRound2 = new core.view.PanelRound();
        jButton13 = new javax.swing.JButton();
        jTabbedPanel1 = new javax.swing.JTabbedPane();
        panelAdministration = new javax.swing.JPanel();
        comboUserSelect = new javax.swing.JComboBox<>();
        radioBtnAdmi = new javax.swing.JRadioButton();
        radioBtnUser = new javax.swing.JRadioButton();
        panelPassengerRegistration = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtCodePhonePassenger = new javax.swing.JTextField();
        txtPassengerID = new javax.swing.JTextField();
        comboBirthYear = new javax.swing.JTextField();
        txtCountryPassenger = new javax.swing.JTextField();
        txtNumberPhonePassenger = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtLastNamePassenger = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        comboBirthMonth = new javax.swing.JComboBox<>();
        txtPassengerName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        comboBirthDay = new javax.swing.JComboBox<>();
        btnRegisterPassenger = new javax.swing.JButton();
        panleAirplaneRegistration = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        txtIDAirplane = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtBrandAirplane = new javax.swing.JTextField();
        txtModelAirplane = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtMaxCapacityAirplane = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtAirlineAirplane = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        btnCreateAirplane = new javax.swing.JButton();
        panelFlightRegistration = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        txtIDFlightRegistration = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        comboPlaneFlightRegistration = new javax.swing.JComboBox<>();
        comboDepartureFlightRegistration = new javax.swing.JComboBox<>();
        jLabel24 = new javax.swing.JLabel();
        comboArrivalFlightRegistration = new javax.swing.JComboBox<>();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        comboScaleFlightRegistration = new javax.swing.JComboBox<>();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        txtDepartureDate = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        comboxDepartureMonthFlight = new javax.swing.JComboBox<>();
        jLabel31 = new javax.swing.JLabel();
        comboxDepartureDayFlight = new javax.swing.JComboBox<>();
        jLabel32 = new javax.swing.JLabel();
        comboxDepartureHourFlight = new javax.swing.JComboBox<>();
        jLabel33 = new javax.swing.JLabel();
        comboxDepartureMinuteFlight = new javax.swing.JComboBox<>();
        comboxArrivalHourFlight = new javax.swing.JComboBox<>();
        jLabel34 = new javax.swing.JLabel();
        comboxArrivalMinuteFlight = new javax.swing.JComboBox<>();
        jLabel35 = new javax.swing.JLabel();
        comboxScaleHourFlight = new javax.swing.JComboBox<>();
        comboxlScaleMinuteFlight = new javax.swing.JComboBox<>();
        btnCreateFlight = new javax.swing.JButton();
        panelUpdateInfo = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        txtFirstNameUpdate = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        txtLastNameUpdate = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        txtBirthdateUpdate = new javax.swing.JTextField();
        MONTH5 = new javax.swing.JComboBox<>();
        DAY5 = new javax.swing.JComboBox<>();
        txtNumberPhoneUpdate = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        txtCodePhoneUpdate = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        txtCountryUpdate = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        txtIDUpdate = new javax.swing.JTextField();
        panelAddToFlight = new javax.swing.JPanel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        comboFlight = new javax.swing.JComboBox<>();
        btnAddFligth = new javax.swing.JButton();
        txtIDFligth = new javax.swing.JTextField();
        panelShowMyFligths = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableShowMyFlights = new javax.swing.JTable();
        btnRefreshShowMyFlights = new javax.swing.JButton();
        panelShowAllPassenger = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableShowAllPassengers = new javax.swing.JTable();
        btnRefreshShowPassengers = new javax.swing.JButton();
        panelShowAllFlights = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableShowAllFlights = new javax.swing.JTable();
        btnRefreshShowFlights = new javax.swing.JButton();
        panelShowAllPlanes = new javax.swing.JPanel();
        btnRefreshShowPlanes = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableShowAllPlanes = new javax.swing.JTable();
        panelShowAllLocations = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableShowAllLocations = new javax.swing.JTable();
        btnRefreshShowLocations = new javax.swing.JButton();
        panelDelayFlight = new javax.swing.JPanel();
        comboHoursDelayFlight = new javax.swing.JComboBox<>();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        comboIDDelayFlight = new javax.swing.JComboBox<>();
        jLabel48 = new javax.swing.JLabel();
        comboMinuteDelayFlight = new javax.swing.JComboBox<>();
        btnDelayFlights = new javax.swing.JButton();
        panelLocationRegistration = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        txtIDAirport = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtNameAirport = new javax.swing.JTextField();
        txtICityAirport = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txtCountryAirport = new javax.swing.JTextField();
        txtLatitudAirport = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        txtLongitudAirport = new javax.swing.JTextField();
        btnCreateLocation = new javax.swing.JButton();
        panelRound3 = new core.view.PanelRound();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        panelRound1.setRadius(40);
        panelRound1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelRound2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panelRound2MouseDragged(evt);
            }
        });
        panelRound2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelRound2MousePressed(evt);
            }
        });

        jButton13.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jButton13.setText("X");
        jButton13.setBorderPainted(false);
        jButton13.setContentAreaFilled(false);
        jButton13.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRound2Layout = new javax.swing.GroupLayout(panelRound2);
        panelRound2.setLayout(panelRound2Layout);
        panelRound2Layout.setHorizontalGroup(
            panelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRound2Layout.createSequentialGroup()
                .addContainerGap(1083, Short.MAX_VALUE)
                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        panelRound2Layout.setVerticalGroup(
            panelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound2Layout.createSequentialGroup()
                .addComponent(jButton13)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        panelRound1.add(panelRound2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1150, -1));

        jTabbedPanel1.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N

        panelAdministration.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        comboUserSelect.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        comboUserSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select User" }));
        comboUserSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboUserSelectActionPerformed(evt);
            }
        });
        panelAdministration.add(comboUserSelect, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 300, 160, -1));

        radioBtnAdmi.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        radioBtnAdmi.setText("Administratior");
        radioBtnAdmi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnAdmiActionPerformed(evt);
            }
        });
        panelAdministration.add(radioBtnAdmi, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 160, -1, -1));

        radioBtnUser.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        radioBtnUser.setText("User");
        radioBtnUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnUserActionPerformed(evt);
            }
        });
        panelAdministration.add(radioBtnUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 230, -1, -1));

        jTabbedPanel1.addTab("Administration", panelAdministration);

        panelPassengerRegistration.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel1.setText("Country:");
        panelPassengerRegistration.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 400, -1, -1));

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel2.setText("ID:");
        panelPassengerRegistration.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, -1, -1));

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel3.setText("First Name:");
        panelPassengerRegistration.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, -1, -1));

        jLabel4.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel4.setText("Last Name:");
        panelPassengerRegistration.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, -1, -1));

        jLabel5.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel5.setText("Birthdate:");
        panelPassengerRegistration.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, -1, -1));

        jLabel6.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel6.setText("+");
        panelPassengerRegistration.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 340, 20, -1));

        txtCodePhonePassenger.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        panelPassengerRegistration.add(txtCodePhonePassenger, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 340, 50, -1));

        txtPassengerID.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        panelPassengerRegistration.add(txtPassengerID, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 90, 130, -1));

        comboBirthYear.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        panelPassengerRegistration.add(comboBirthYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 280, 90, -1));

        txtCountryPassenger.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        panelPassengerRegistration.add(txtCountryPassenger, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 400, 130, -1));

        txtNumberPhonePassenger.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        panelPassengerRegistration.add(txtNumberPhonePassenger, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 340, 130, -1));

        jLabel7.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel7.setText("Phone:");
        panelPassengerRegistration.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 340, -1, -1));

        jLabel8.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel8.setText("-");
        panelPassengerRegistration.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 280, 30, -1));

        txtLastNamePassenger.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        panelPassengerRegistration.add(txtLastNamePassenger, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 220, 130, -1));

        jLabel9.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel9.setText("-");
        panelPassengerRegistration.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 340, 30, -1));

        comboBirthMonth.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        comboBirthMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month" }));
        panelPassengerRegistration.add(comboBirthMonth, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 280, -1, -1));

        txtPassengerName.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        panelPassengerRegistration.add(txtPassengerName, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 160, 130, -1));

        jLabel10.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel10.setText("-");
        panelPassengerRegistration.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 280, 30, -1));

        comboBirthDay.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        comboBirthDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Day" }));
        comboBirthDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBirthDayActionPerformed(evt);
            }
        });
        panelPassengerRegistration.add(comboBirthDay, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 280, -1, -1));

        btnRegisterPassenger.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        btnRegisterPassenger.setText("Register");
        btnRegisterPassenger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterPassengerActionPerformed(evt);
            }
        });
        panelPassengerRegistration.add(btnRegisterPassenger, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 480, -1, -1));

        jTabbedPanel1.addTab("Passenger registration", panelPassengerRegistration);

        panleAirplaneRegistration.setLayout(null);

        jLabel11.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel11.setText("ID:");
        panleAirplaneRegistration.add(jLabel11);
        jLabel11.setBounds(53, 96, 22, 25);

        txtIDAirplane.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        txtIDAirplane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDAirplaneActionPerformed(evt);
            }
        });
        panleAirplaneRegistration.add(txtIDAirplane);
        txtIDAirplane.setBounds(180, 93, 130, 31);

        jLabel12.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel12.setText("Brand:");
        panleAirplaneRegistration.add(jLabel12);
        jLabel12.setBounds(53, 157, 50, 25);

        txtBrandAirplane.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        panleAirplaneRegistration.add(txtBrandAirplane);
        txtBrandAirplane.setBounds(180, 154, 130, 31);

        txtModelAirplane.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        txtModelAirplane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModelAirplaneActionPerformed(evt);
            }
        });
        panleAirplaneRegistration.add(txtModelAirplane);
        txtModelAirplane.setBounds(180, 213, 130, 31);

        jLabel13.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel13.setText("Model:");
        panleAirplaneRegistration.add(jLabel13);
        jLabel13.setBounds(53, 216, 55, 25);

        txtMaxCapacityAirplane.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        panleAirplaneRegistration.add(txtMaxCapacityAirplane);
        txtMaxCapacityAirplane.setBounds(180, 273, 130, 31);

        jLabel14.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel14.setText("Max Capacity:");
        panleAirplaneRegistration.add(jLabel14);
        jLabel14.setBounds(53, 276, 109, 25);

        txtAirlineAirplane.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        panleAirplaneRegistration.add(txtAirlineAirplane);
        txtAirlineAirplane.setBounds(180, 333, 130, 31);

        jLabel15.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel15.setText("Airline:");
        panleAirplaneRegistration.add(jLabel15);
        jLabel15.setBounds(53, 336, 70, 25);

        btnCreateAirplane.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        btnCreateAirplane.setText("Create");
        btnCreateAirplane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateAirplaneActionPerformed(evt);
            }
        });
        panleAirplaneRegistration.add(btnCreateAirplane);
        btnCreateAirplane.setBounds(490, 480, 120, 40);

        jTabbedPanel1.addTab("Airplane registration", panleAirplaneRegistration);

        jLabel22.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel22.setText("ID:");

        txtIDFlightRegistration.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        jLabel23.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel23.setText("Plane:");

        comboPlaneFlightRegistration.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        comboPlaneFlightRegistration.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Plane" }));
        comboPlaneFlightRegistration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPlaneFlightRegistrationActionPerformed(evt);
            }
        });

        comboDepartureFlightRegistration.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        comboDepartureFlightRegistration.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Location" }));

        jLabel24.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel24.setText("Departure location:");

        comboArrivalFlightRegistration.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        comboArrivalFlightRegistration.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Location" }));

        jLabel25.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel25.setText("Arrival location:");

        jLabel26.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel26.setText("Scale location:");

        comboScaleFlightRegistration.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        comboScaleFlightRegistration.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Location" }));

        jLabel27.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel27.setText("Duration:");

        jLabel28.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel28.setText("Duration:");

        jLabel29.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel29.setText("Departure date:");

        txtDepartureDate.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        jLabel30.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel30.setText("-");

        comboxDepartureMonthFlight.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        comboxDepartureMonthFlight.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month" }));

        jLabel31.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel31.setText("-");

        comboxDepartureDayFlight.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        comboxDepartureDayFlight.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Day" }));

        jLabel32.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel32.setText("-");

        comboxDepartureHourFlight.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        comboxDepartureHourFlight.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hour" }));

        jLabel33.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel33.setText("-");

        comboxDepartureMinuteFlight.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        comboxDepartureMinuteFlight.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Minute" }));
        comboxDepartureMinuteFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboxDepartureMinuteFlightActionPerformed(evt);
            }
        });

        comboxArrivalHourFlight.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        comboxArrivalHourFlight.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hour" }));

        jLabel34.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel34.setText("-");

        comboxArrivalMinuteFlight.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        comboxArrivalMinuteFlight.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Minute" }));

        jLabel35.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel35.setText("-");

        comboxScaleHourFlight.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        comboxScaleHourFlight.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hour" }));

        comboxlScaleMinuteFlight.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        comboxlScaleMinuteFlight.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Minute" }));

        btnCreateFlight.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        btnCreateFlight.setText("Create");
        btnCreateFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateFlightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelFlightRegistrationLayout = new javax.swing.GroupLayout(panelFlightRegistration);
        panelFlightRegistration.setLayout(panelFlightRegistrationLayout);
        panelFlightRegistrationLayout.setHorizontalGroup(
            panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFlightRegistrationLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelFlightRegistrationLayout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(comboScaleFlightRegistration, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFlightRegistrationLayout.createSequentialGroup()
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(comboArrivalFlightRegistration, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelFlightRegistrationLayout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addGap(46, 46, 46)
                        .addComponent(comboDepartureFlightRegistration, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelFlightRegistrationLayout.createSequentialGroup()
                        .addGroup(panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22)
                            .addComponent(jLabel23))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtIDFlightRegistration)
                            .addComponent(comboPlaneFlightRegistration, 0, 130, Short.MAX_VALUE))))
                .addGap(45, 45, 45)
                .addGroup(panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel27)
                    .addComponent(jLabel28)
                    .addComponent(jLabel29))
                .addGap(18, 18, 18)
                .addGroup(panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelFlightRegistrationLayout.createSequentialGroup()
                        .addComponent(txtDepartureDate, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelFlightRegistrationLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(comboxDepartureMonthFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelFlightRegistrationLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(comboxDepartureDayFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelFlightRegistrationLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(comboxDepartureHourFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelFlightRegistrationLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(comboxDepartureMinuteFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(30, 30, 30))
                    .addGroup(panelFlightRegistrationLayout.createSequentialGroup()
                        .addGroup(panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelFlightRegistrationLayout.createSequentialGroup()
                                .addComponent(comboxArrivalHourFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addGroup(panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(panelFlightRegistrationLayout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(comboxArrivalMinuteFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(panelFlightRegistrationLayout.createSequentialGroup()
                                .addComponent(comboxScaleHourFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addGroup(panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(panelFlightRegistrationLayout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(comboxlScaleMinuteFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFlightRegistrationLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCreateFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(530, 530, 530))
        );
        panelFlightRegistrationLayout.setVerticalGroup(
            panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFlightRegistrationLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelFlightRegistrationLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel22))
                    .addComponent(txtIDFlightRegistration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(comboPlaneFlightRegistration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboxDepartureHourFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32)
                    .addComponent(jLabel33)
                    .addComponent(comboxDepartureMinuteFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelFlightRegistrationLayout.createSequentialGroup()
                        .addGroup(panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel24)
                                .addComponent(comboDepartureFlightRegistration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel29))
                            .addComponent(txtDepartureDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboxDepartureMonthFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel30)
                            .addComponent(jLabel31)
                            .addComponent(comboxDepartureDayFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel25)
                                .addComponent(comboArrivalFlightRegistration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel28))
                            .addComponent(comboxArrivalHourFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel34)
                            .addComponent(comboxArrivalMinuteFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboxScaleHourFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel35)
                            .addComponent(comboxlScaleMinuteFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelFlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel26)
                                .addComponent(comboScaleFlightRegistration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel27)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                .addComponent(btnCreateFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );

        jTabbedPanel1.addTab("Flight registration", panelFlightRegistration);

        jLabel36.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel36.setText("ID:");

        jLabel37.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel37.setText("First Name:");

        txtFirstNameUpdate.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        jLabel38.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel38.setText("Last Name:");

        txtLastNameUpdate.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        jLabel39.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel39.setText("Birthdate:");

        txtBirthdateUpdate.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        MONTH5.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        MONTH5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month" }));

        DAY5.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DAY5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Day" }));

        txtNumberPhoneUpdate.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        jLabel40.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel40.setText("-");

        txtCodePhoneUpdate.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        jLabel41.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel41.setText("+");

        jLabel42.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel42.setText("Phone:");

        jLabel43.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel43.setText("Country:");

        txtCountryUpdate.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        btnUpdate.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        txtIDUpdate.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        txtIDUpdate.setEnabled(false);

        javax.swing.GroupLayout panelUpdateInfoLayout = new javax.swing.GroupLayout(panelUpdateInfo);
        panelUpdateInfo.setLayout(panelUpdateInfoLayout);
        panelUpdateInfoLayout.setHorizontalGroup(
            panelUpdateInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUpdateInfoLayout.createSequentialGroup()
                .addGroup(panelUpdateInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelUpdateInfoLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(panelUpdateInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelUpdateInfoLayout.createSequentialGroup()
                                .addComponent(jLabel38)
                                .addGap(43, 43, 43)
                                .addComponent(txtLastNameUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelUpdateInfoLayout.createSequentialGroup()
                                .addComponent(jLabel39)
                                .addGap(55, 55, 55)
                                .addComponent(txtBirthdateUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(MONTH5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(DAY5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelUpdateInfoLayout.createSequentialGroup()
                                .addComponent(jLabel42)
                                .addGap(56, 56, 56)
                                .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(txtCodePhoneUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(txtNumberPhoneUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelUpdateInfoLayout.createSequentialGroup()
                                .addComponent(jLabel43)
                                .addGap(63, 63, 63)
                                .addComponent(txtCountryUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelUpdateInfoLayout.createSequentialGroup()
                                .addGroup(panelUpdateInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel37)
                                    .addComponent(jLabel36))
                                .addGap(41, 41, 41)
                                .addGroup(panelUpdateInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtIDUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFirstNameUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(panelUpdateInfoLayout.createSequentialGroup()
                        .addGap(507, 507, 507)
                        .addComponent(btnUpdate)))
                .addContainerGap(555, Short.MAX_VALUE))
        );
        panelUpdateInfoLayout.setVerticalGroup(
            panelUpdateInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUpdateInfoLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(panelUpdateInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(txtIDUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(panelUpdateInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel37)
                    .addComponent(txtFirstNameUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(panelUpdateInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel38)
                    .addComponent(txtLastNameUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(panelUpdateInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel39)
                    .addComponent(txtBirthdateUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MONTH5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DAY5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(panelUpdateInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel42)
                    .addComponent(jLabel41)
                    .addComponent(txtCodePhoneUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel40)
                    .addComponent(txtNumberPhoneUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(panelUpdateInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel43)
                    .addComponent(txtCountryUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(btnUpdate)
                .addGap(113, 113, 113))
        );

        jTabbedPanel1.addTab("Update info", panelUpdateInfo);

        jLabel44.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel44.setText("ID:");

        jLabel45.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel45.setText("Flight:");

        comboFlight.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        comboFlight.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Flight" }));
        comboFlight.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                comboFlightMouseEntered(evt);
            }
        });
        comboFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboFlightActionPerformed(evt);
            }
        });

        btnAddFligth.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        btnAddFligth.setText("Add");
        btnAddFligth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFligthActionPerformed(evt);
            }
        });

        txtIDFligth.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        txtIDFligth.setEnabled(false);
        txtIDFligth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDFligthActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAddToFlightLayout = new javax.swing.GroupLayout(panelAddToFlight);
        panelAddToFlight.setLayout(panelAddToFlightLayout);
        panelAddToFlightLayout.setHorizontalGroup(
            panelAddToFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddToFlightLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(panelAddToFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel44)
                    .addComponent(jLabel45))
                .addGap(79, 79, 79)
                .addGroup(panelAddToFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(comboFlight, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtIDFligth))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddToFlightLayout.createSequentialGroup()
                .addContainerGap(521, Short.MAX_VALUE)
                .addComponent(btnAddFligth, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(509, 509, 509))
        );
        panelAddToFlightLayout.setVerticalGroup(
            panelAddToFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddToFlightLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(panelAddToFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel44)
                    .addComponent(txtIDFligth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(panelAddToFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45)
                    .addComponent(comboFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 292, Short.MAX_VALUE)
                .addComponent(btnAddFligth, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85))
        );

        jTabbedPanel1.addTab("Add to flight", panelAddToFlight);

        tableShowMyFlights.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        tableShowMyFlights.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Departure Date", "Arrival Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableShowMyFlights);

        btnRefreshShowMyFlights.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        btnRefreshShowMyFlights.setText("Refresh");
        btnRefreshShowMyFlights.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshShowMyFlightsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelShowMyFligthsLayout = new javax.swing.GroupLayout(panelShowMyFligths);
        panelShowMyFligths.setLayout(panelShowMyFligthsLayout);
        panelShowMyFligthsLayout.setHorizontalGroup(
            panelShowMyFligthsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelShowMyFligthsLayout.createSequentialGroup()
                .addGap(269, 269, 269)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(291, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelShowMyFligthsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRefreshShowMyFlights)
                .addGap(527, 527, 527))
        );
        panelShowMyFligthsLayout.setVerticalGroup(
            panelShowMyFligthsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelShowMyFligthsLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(btnRefreshShowMyFlights)
                .addContainerGap())
        );

        jTabbedPanel1.addTab("Show my flights", panelShowMyFligths);

        tableShowAllPassengers.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        tableShowAllPassengers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Birthdate", "Age", "Phone", "Country", "Num Flight"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableShowAllPassengers);

        btnRefreshShowPassengers.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        btnRefreshShowPassengers.setText("Refresh");
        btnRefreshShowPassengers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshShowPassengersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelShowAllPassengerLayout = new javax.swing.GroupLayout(panelShowAllPassenger);
        panelShowAllPassenger.setLayout(panelShowAllPassengerLayout);
        panelShowAllPassengerLayout.setHorizontalGroup(
            panelShowAllPassengerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelShowAllPassengerLayout.createSequentialGroup()
                .addGroup(panelShowAllPassengerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelShowAllPassengerLayout.createSequentialGroup()
                        .addGap(489, 489, 489)
                        .addComponent(btnRefreshShowPassengers))
                    .addGroup(panelShowAllPassengerLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1078, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        panelShowAllPassengerLayout.setVerticalGroup(
            panelShowAllPassengerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelShowAllPassengerLayout.createSequentialGroup()
                .addContainerGap(72, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRefreshShowPassengers)
                .addContainerGap())
        );

        jTabbedPanel1.addTab("Show all passengers", panelShowAllPassenger);

        tableShowAllFlights.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        tableShowAllFlights.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Departure Airport ID", "Arrival Airport ID", "Scale Airport ID", "Departure Date", "Arrival Date", "Plane ID", "Number Passengers"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tableShowAllFlights);

        btnRefreshShowFlights.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        btnRefreshShowFlights.setText("Refresh");
        btnRefreshShowFlights.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshShowFlightsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelShowAllFlightsLayout = new javax.swing.GroupLayout(panelShowAllFlights);
        panelShowAllFlights.setLayout(panelShowAllFlightsLayout);
        panelShowAllFlightsLayout.setHorizontalGroup(
            panelShowAllFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelShowAllFlightsLayout.createSequentialGroup()
                .addGroup(panelShowAllFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelShowAllFlightsLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelShowAllFlightsLayout.createSequentialGroup()
                        .addGap(521, 521, 521)
                        .addComponent(btnRefreshShowFlights)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        panelShowAllFlightsLayout.setVerticalGroup(
            panelShowAllFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelShowAllFlightsLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRefreshShowFlights)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jTabbedPanel1.addTab("Show all flights", panelShowAllFlights);

        btnRefreshShowPlanes.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        btnRefreshShowPlanes.setText("Refresh");
        btnRefreshShowPlanes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshShowPlanesActionPerformed(evt);
            }
        });

        tableShowAllPlanes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Brand", "Model", "Max Capacity", "Airline", "Number Flights"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tableShowAllPlanes);

        javax.swing.GroupLayout panelShowAllPlanesLayout = new javax.swing.GroupLayout(panelShowAllPlanes);
        panelShowAllPlanes.setLayout(panelShowAllPlanesLayout);
        panelShowAllPlanesLayout.setHorizontalGroup(
            panelShowAllPlanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelShowAllPlanesLayout.createSequentialGroup()
                .addGroup(panelShowAllPlanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelShowAllPlanesLayout.createSequentialGroup()
                        .addGap(508, 508, 508)
                        .addComponent(btnRefreshShowPlanes))
                    .addGroup(panelShowAllPlanesLayout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 816, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(189, Short.MAX_VALUE))
        );
        panelShowAllPlanesLayout.setVerticalGroup(
            panelShowAllPlanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelShowAllPlanesLayout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(btnRefreshShowPlanes)
                .addGap(17, 17, 17))
        );

        jTabbedPanel1.addTab("Show all planes", panelShowAllPlanes);

        tableShowAllLocations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Airport ID", "Airport Name", "City", "Country"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tableShowAllLocations);

        btnRefreshShowLocations.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        btnRefreshShowLocations.setText("Refresh");
        btnRefreshShowLocations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshShowLocationsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelShowAllLocationsLayout = new javax.swing.GroupLayout(panelShowAllLocations);
        panelShowAllLocations.setLayout(panelShowAllLocationsLayout);
        panelShowAllLocationsLayout.setHorizontalGroup(
            panelShowAllLocationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelShowAllLocationsLayout.createSequentialGroup()
                .addGroup(panelShowAllLocationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelShowAllLocationsLayout.createSequentialGroup()
                        .addGap(508, 508, 508)
                        .addComponent(btnRefreshShowLocations))
                    .addGroup(panelShowAllLocationsLayout.createSequentialGroup()
                        .addGap(226, 226, 226)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(272, Short.MAX_VALUE))
        );
        panelShowAllLocationsLayout.setVerticalGroup(
            panelShowAllLocationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelShowAllLocationsLayout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(btnRefreshShowLocations)
                .addGap(17, 17, 17))
        );

        jTabbedPanel1.addTab("Show all locations", panelShowAllLocations);

        comboHoursDelayFlight.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        comboHoursDelayFlight.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hour" }));
        comboHoursDelayFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboHoursDelayFlightActionPerformed(evt);
            }
        });

        jLabel46.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel46.setText("Hours:");

        jLabel47.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel47.setText("ID:");

        comboIDDelayFlight.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        comboIDDelayFlight.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID" }));
        comboIDDelayFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboIDDelayFlightActionPerformed(evt);
            }
        });

        jLabel48.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel48.setText("Minutes:");

        comboMinuteDelayFlight.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        comboMinuteDelayFlight.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Minute" }));

        btnDelayFlights.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        btnDelayFlights.setText("Delay");
        btnDelayFlights.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelayFlightsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelDelayFlightLayout = new javax.swing.GroupLayout(panelDelayFlight);
        panelDelayFlight.setLayout(panelDelayFlightLayout);
        panelDelayFlightLayout.setHorizontalGroup(
            panelDelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDelayFlightLayout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addGroup(panelDelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel47)
                    .addComponent(jLabel46)
                    .addComponent(jLabel48))
                .addGap(64, 64, 64)
                .addGroup(panelDelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboMinuteDelayFlight, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboHoursDelayFlight, 0, 121, Short.MAX_VALUE)
                    .addComponent(comboIDDelayFlight, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(804, 804, 804))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDelayFlightLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDelayFlights)
                .addGap(531, 531, 531))
        );
        panelDelayFlightLayout.setVerticalGroup(
            panelDelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDelayFlightLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(panelDelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel47)
                    .addComponent(comboIDDelayFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(panelDelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel46)
                    .addComponent(comboHoursDelayFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(panelDelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel48)
                    .addComponent(comboMinuteDelayFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 311, Short.MAX_VALUE)
                .addComponent(btnDelayFlights)
                .addGap(33, 33, 33))
        );

        jTabbedPanel1.addTab("Delay flight", panelDelayFlight);

        jLabel16.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel16.setText("Airport ID:");

        txtIDAirport.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        jLabel17.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel17.setText("Airport name:");

        txtNameAirport.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        txtICityAirport.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        jLabel18.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel18.setText("Airport city:");

        jLabel19.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel19.setText("Airport country:");

        txtCountryAirport.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        txtLatitudAirport.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        jLabel20.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel20.setText("Airport latitude:");

        jLabel21.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel21.setText("Airport longitude:");

        txtLongitudAirport.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        btnCreateLocation.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        btnCreateLocation.setText("Create");
        btnCreateLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateLocationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLocationRegistrationLayout = new javax.swing.GroupLayout(panelLocationRegistration);
        panelLocationRegistration.setLayout(panelLocationRegistrationLayout);
        panelLocationRegistrationLayout.setHorizontalGroup(
            panelLocationRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLocationRegistrationLayout.createSequentialGroup()
                .addGroup(panelLocationRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLocationRegistrationLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(panelLocationRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21))
                        .addGap(80, 80, 80)
                        .addGroup(panelLocationRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtLongitudAirport, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtIDAirport, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNameAirport, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtICityAirport, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCountryAirport, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLatitudAirport, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelLocationRegistrationLayout.createSequentialGroup()
                        .addGap(515, 515, 515)
                        .addComponent(btnCreateLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(515, 515, 515))
        );
        panelLocationRegistrationLayout.setVerticalGroup(
            panelLocationRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLocationRegistrationLayout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(panelLocationRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelLocationRegistrationLayout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel17)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel18)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel19)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel20))
                    .addGroup(panelLocationRegistrationLayout.createSequentialGroup()
                        .addComponent(txtIDAirport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(txtNameAirport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(txtICityAirport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(txtCountryAirport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(txtLatitudAirport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(44, 44, 44)
                .addGroup(panelLocationRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(txtLongitudAirport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(btnCreateLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );

        jTabbedPanel1.addTab("Location registration", panelLocationRegistration);

        panelRound1.add(jTabbedPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 41, 1150, 620));

        javax.swing.GroupLayout panelRound3Layout = new javax.swing.GroupLayout(panelRound3);
        panelRound3.setLayout(panelRound3Layout);
        panelRound3Layout.setHorizontalGroup(
            panelRound3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1150, Short.MAX_VALUE)
        );
        panelRound3Layout.setVerticalGroup(
            panelRound3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
        );

        panelRound1.add(panelRound3, new org.netbeans.lib.awtextra.AbsoluteConstraints(-2, 660, 1150, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelRound1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelRound1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void panelRound2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelRound2MousePressed
        x = evt.getX();
        y = evt.getY();
    }//GEN-LAST:event_panelRound2MousePressed

    private void panelRound2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelRound2MouseDragged
        this.setLocation(this.getLocation().x + evt.getX() - x, this.getLocation().y + evt.getY() - y);
    }//GEN-LAST:event_panelRound2MouseDragged


    private void btnRegisterPassengerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterPassengerActionPerformed
        // TODO add your handling code here:
//        long id = Long.parseLong(txtPassengerID.getText());
//        String firstname = txtPassengerName.getText();
//        String lastname = txtLastNamePassenger.getText();
//        int year = Integer.parseInt(comboBirthYear.getText());
//        int month = Integer.parseInt(comboBirthMonth.getItemAt(comboBirthMonth.getSelectedIndex()));
//        int day = Integer.parseInt(comboBirthDay.getItemAt(comboBirthDay.getSelectedIndex()));
//        int phoneCode = Integer.parseInt(txtCodePhonePassenger.getText());
//        long phone = Long.parseLong(txtNumberPhonePassenger.getText());
//        String country = txtCountryPassenger.getText();
//
//        LocalDate birthDate = LocalDate.of(year, month, day);
//
//        this.passengers.add(new Passenger(id, firstname, lastname, birthDate, phoneCode, phone, country));
//        this.userSelect.addItem("" + id);

        String id = txtPassengerID.getText();
        String firstname = txtPassengerName.getText();
        String lastname = txtLastNamePassenger.getText();
        String year = comboBirthYear.getText();
        String month = comboBirthMonth.getItemAt(comboBirthMonth.getSelectedIndex());
        String day = comboBirthDay.getItemAt(comboBirthDay.getSelectedIndex());
        String phoneCode = txtCodePhonePassenger.getText();
        String phone = txtNumberPhonePassenger.getText();
        String country = txtCountryPassenger.getText();
        String birthDate = year + "-" + month + "-" + day;

        Response response = passengerController.createPassenger(
                id, firstname, lastname, birthDate, phoneCode, phone, country
        );

        if (response.getStatus() >= 500) {
            JOptionPane.showMessageDialog(null, response.getMessage(), "Error " + response.getStatus(), JOptionPane.ERROR_MESSAGE);
        } else if (response.getStatus() >= 400) {
            JOptionPane.showMessageDialog(null, response.getMessage(), "Advertencia " + response.getStatus(), JOptionPane.WARNING_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, response.getMessage(), "Pasajero creado", JOptionPane.INFORMATION_MESSAGE);

            txtPassengerID.setText("");
            txtPassengerName.setText("");
            txtLastNamePassenger.setText("");
            comboBirthYear.setText("");
            comboBirthMonth.setSelectedIndex(0);
            comboBirthDay.setSelectedIndex(0);
            txtCodePhonePassenger.setText("");
            txtNumberPhonePassenger.setText("");
            txtCountryPassenger.setText("");

            updateUserComboBox();
        }
    }//GEN-LAST:event_btnRegisterPassengerActionPerformed

    private void btnCreateAirplaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateAirplaneActionPerformed
        // TODO add your handling code here:
//        String id = txtIDAirplane.getText();
//        String brand = txtBrandAirplane.getText();
//        String model = txtModelAirplane.getText();
//        int maxCapacity = Integer.parseInt(txtMaxCapacityAirplane.getText());
//        String airline = txtAirlineAirplane.getText();
//
//        this.planes.add(new Plane(id, brand, model, maxCapacity, airline));
//
//        this.comboPlaneFlightRegistration.addItem(id);
        String id = txtIDAirplane.getText();
        String brand = txtBrandAirplane.getText();
        String model = txtModelAirplane.getText();
        String maxCapacity = txtMaxCapacityAirplane.getText();
        String airline = txtAirlineAirplane.getText();

        Response response = planeController.createPlane(id, brand, model, maxCapacity, airline);

        if (response.getStatus() >= 500) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } else if (response.getStatus() >= 400) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Avión creado correctamente", JOptionPane.INFORMATION_MESSAGE);

            txtIDAirplane.setText("");
            txtBrandAirplane.setText("");
            txtModelAirplane.setText("");
            txtMaxCapacityAirplane.setText("");
            txtAirlineAirplane.setText("");

            updatePlaneComboBox();
        }
    }//GEN-LAST:event_btnCreateAirplaneActionPerformed

    private void btnCreateLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateLocationActionPerformed
        // TODO add your handling code here:
//        String id = txtIDAirport.getText();
//        String name = txtNameAirport.getText();
//        String city = txtICityAirport.getText();
//        String country = txtCountryAirport.getText();
//        double latitude = Double.parseDouble(txtLatitudAirport.getText());
//        double longitude = Double.parseDouble(txtLongitudAirport.getText());
//
//        this.locations.add(new Location(id, name, city, country, latitude, longitude));
//
//        this.comboDepartureFlightRegistration.addItem(id);
//        this.comboArrivalFlightRegistration.addItem(id);
//        this.comboScaleFlightRegistration.addItem(id);
        String id = txtIDAirport.getText();
        String name = txtNameAirport.getText();
        String city = txtICityAirport.getText();
        String country = txtCountryAirport.getText();
        String latitude = txtLatitudAirport.getText();
        String longitude = txtLongitudAirport.getText();

        Response response = locationController.createLocation(id, name, city, country, latitude, longitude);

        if (response.getStatus() >= 500) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } else if (response.getStatus() >= 400) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Ubicación creada correctamente", JOptionPane.INFORMATION_MESSAGE);
            txtIDAirport.setText("");
            txtNameAirport.setText("");
            txtICityAirport.setText("");
            txtCountryAirport.setText("");
            txtLatitudAirport.setText("");
            txtLongitudAirport.setText("");

            updateLocationComboBox();
        }
    }//GEN-LAST:event_btnCreateLocationActionPerformed

    private void btnCreateFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateFlightActionPerformed
        // TODO add your handling code here:
//        String id = txtIDFlightRegistration.getText();
//        String planeId = comboPlaneFlightRegistration.getItemAt(comboPlaneFlightRegistration.getSelectedIndex());
//        String departureLocationId = comboDepartureFlightRegistration.getItemAt(comboDepartureFlightRegistration.getSelectedIndex());
//        String arrivalLocationId = comboArrivalFlightRegistration.getItemAt(comboArrivalFlightRegistration.getSelectedIndex());
//        String scaleLocationId = comboScaleFlightRegistration.getItemAt(comboScaleFlightRegistration.getSelectedIndex());
//        int year = Integer.parseInt(txtDepartureDate.getText());
//        int month = Integer.parseInt(MONTH1.getItemAt(MONTH1.getSelectedIndex()));
//        int day = Integer.parseInt(DAY1.getItemAt(DAY1.getSelectedIndex()));
//        int hour = Integer.parseInt(MONTH2.getItemAt(MONTH2.getSelectedIndex()));
//        int minutes = Integer.parseInt(DAY2.getItemAt(DAY2.getSelectedIndex()));
//        int hoursDurationsArrival = Integer.parseInt(MONTH3.getItemAt(MONTH3.getSelectedIndex()));
//        int minutesDurationsArrival = Integer.parseInt(DAY3.getItemAt(DAY3.getSelectedIndex()));
//        int hoursDurationsScale = Integer.parseInt(MONTH4.getItemAt(MONTH4.getSelectedIndex()));
//        int minutesDurationsScale = Integer.parseInt(DAY4.getItemAt(DAY4.getSelectedIndex()));
//
//        LocalDateTime departureDate = LocalDateTime.of(year, month, day, hour, minutes);
//
//        Plane plane = null;
//        for (Plane p : this.planes) {
//            if (planeId.equals(p.getId())) {
//                plane = p;
//            }
//        }
//
//        Location departure = null;
//        Location arrival = null;
//        Location scale = null;
//        for (Location location : this.locations) {
//            if (departureLocationId.equals(location.getAirportId())) {
//                departure = location;
//            }
//            if (arrivalLocationId.equals(location.getAirportId())) {
//                arrival = location;
//            }
//            if (scaleLocationId.equals(location.getAirportId())) {
//                scale = location;
//            }
//        }
//
//        if (scale == null) {
//            this.flights.add(new Flight(id, plane, departure, arrival, departureDate, hoursDurationsArrival, minutesDurationsArrival));
//        } else {
//            this.flights.add(new Flight(id, plane, departure, scale, arrival, departureDate, hoursDurationsArrival, minutesDurationsArrival, hoursDurationsScale, minutesDurationsScale));
//        }
//
//        this.comboFlight.addItem(id);
        String id = txtIDFlightRegistration.getText();
        String planeId = comboPlaneFlightRegistration.getItemAt(comboPlaneFlightRegistration.getSelectedIndex());
        String departureLocationId = comboDepartureFlightRegistration.getItemAt(comboDepartureFlightRegistration.getSelectedIndex());
        String arrivalLocationId = comboArrivalFlightRegistration.getItemAt(comboArrivalFlightRegistration.getSelectedIndex());
        String scaleLocationId = comboScaleFlightRegistration.getItemAt(comboScaleFlightRegistration.getSelectedIndex());
        String year = txtDepartureDate.getText();
        String month = comboxDepartureMonthFlight.getItemAt(comboxDepartureMonthFlight.getSelectedIndex());
        String day = comboxDepartureDayFlight.getItemAt(comboxDepartureDayFlight.getSelectedIndex());
        String hour = comboxDepartureHourFlight.getItemAt(comboxDepartureHourFlight.getSelectedIndex());
        String minute = comboxDepartureMinuteFlight.getItemAt(comboxDepartureMinuteFlight.getSelectedIndex());
        String departureDate = year + "-" + month + "-" + day + "T" + hour + ":" + minute;
        String hoursDurationsArrival = comboxArrivalHourFlight.getItemAt(comboxArrivalHourFlight.getSelectedIndex());
        String minutesDurationsArrival = comboxArrivalMinuteFlight.getItemAt(comboxArrivalMinuteFlight.getSelectedIndex());
        String hoursDurationsScale = comboxScaleHourFlight.getItemAt(comboxScaleHourFlight.getSelectedIndex());
        String minutesDurationsScale = comboxlScaleMinuteFlight.getItemAt(comboxlScaleMinuteFlight.getSelectedIndex());

        // Llamar al controlador
        Response response = flightController.createFlight(
                id, planeId, departureLocationId, arrivalLocationId, departureDate,
                hoursDurationsArrival, minutesDurationsArrival,
                scaleLocationId, hoursDurationsScale, minutesDurationsScale
        );

        if (response.getStatus() >= 500) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } else if (response.getStatus() >= 400) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Vuelo creado", JOptionPane.INFORMATION_MESSAGE);

            txtIDFlightRegistration.setText("");
            txtDepartureDate.setText("");
            comboPlaneFlightRegistration.setSelectedIndex(0);
            comboDepartureFlightRegistration.setSelectedIndex(0);
            comboArrivalFlightRegistration.setSelectedIndex(0);
            comboScaleFlightRegistration.setSelectedIndex(0);
            comboxDepartureMonthFlight.setSelectedIndex(0);
            comboxDepartureDayFlight.setSelectedIndex(0);
            comboxDepartureHourFlight.setSelectedIndex(0);
            comboxDepartureMinuteFlight.setSelectedIndex(0);
            comboxArrivalHourFlight.setSelectedIndex(0);
            comboxArrivalMinuteFlight.setSelectedIndex(0);
            comboxScaleHourFlight.setSelectedIndex(0);
            comboxlScaleMinuteFlight.setSelectedIndex(0);

            updateFlightComboBox();
        }
    }//GEN-LAST:event_btnCreateFlightActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
//        long id = Long.parseLong(txtIDUpdate.getText());
//        String firstname = txtFirstNameUpdate.getText();
//        String lastname = txtLastNameUpdate.getText();
//        int year = Integer.parseInt(txtBirthdateUpdate.getText());
//        int month = Integer.parseInt(comboBirthMonth.getItemAt(MONTH5.getSelectedIndex()));
//        int day = Integer.parseInt(comboBirthDay.getItemAt(DAY5.getSelectedIndex()));
//        int phoneCode = Integer.parseInt(txtCodePhoneUpdate.getText());
//        long phone = Long.parseLong(txtNumberPhoneUpdate.getText());
//        String country = txtCountryUpdate.getText();
//
//        LocalDate birthDate = LocalDate.of(year, month, day);
//
//        Passenger passenger = null;
//        for (Passenger p : this.passengers) {
//            if (p.getId() == id) {
//                passenger = p;
//            }
//        }
//
//        passenger.setFirstname(firstname);
//        passenger.setLastname(lastname);
//        passenger.setBirthDate(birthDate);
//        passenger.setCountryPhoneCode(phoneCode);
//        passenger.setPhone(phone);
//        passenger.setCountry(country);
        String id = txtIDUpdate.getText();
        String firstname = txtFirstNameUpdate.getText();
        String lastname = txtLastNameUpdate.getText();
        String year = txtBirthdateUpdate.getText();
        String month = comboBirthMonth.getItemAt(MONTH5.getSelectedIndex());
        String day = comboBirthDay.getItemAt(DAY5.getSelectedIndex());
        String phoneCode = txtCodePhoneUpdate.getText();
        String phone = txtNumberPhoneUpdate.getText();
        String country = txtCountryUpdate.getText();

        String birthDate = year + "-" + month + "-" + day;

        Response response = passengerController.updatePassenger(id, firstname, lastname, birthDate, phoneCode, phone, country);

        if (response.getStatus() >= 500) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } else if (response.getStatus() >= 400) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Pasajero actualizado correctamente", JOptionPane.INFORMATION_MESSAGE);
            updateUserComboBox();
            txtIDUpdate.setText("");
            txtFirstNameUpdate.setText("");
            txtLastNameUpdate.setText("");
            txtBirthdateUpdate.setText("");
            comboBirthMonth.setSelectedIndex(0);
            comboBirthDay.setSelectedIndex(0);
            txtCodePhoneUpdate.setText("");
            txtNumberPhoneUpdate.setText("");
            txtCountryUpdate.setText("");

        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnAddFligthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFligthActionPerformed
        // TODO add your handling code here:
//        long passengerId = Long.parseLong(txtIDFligth.getText());
//        String flightId = comboFlight.getItemAt(comboFlight.getSelectedIndex());

//        Passenger passenger = null;
//        Flight flight = null;
//
//        for (Passenger p : this.passengers) {
//            if (p.getId() == passengerId) {
//                passenger = p;
//            }
//        }
//        for (Flight f : this.flights) {
//            if (flightId.equals(f.getId())) {
//                flight = f;
//            }
//        }
//        passenger.addFlight(flight);
//        flight.addPassenger(passenger);
        String passengerId = txtIDFligth.getText();
        String flightId = comboFlight.getItemAt(comboFlight.getSelectedIndex());

        Response response = flightController.addPassenger(passengerId, flightId);

        if (response.getStatus() >= 500) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } else if (response.getStatus() >= 400) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Pasajero agregado al vuelo", JOptionPane.INFORMATION_MESSAGE);

            txtIDFligth.setText("");
            comboFlight.setSelectedIndex(0);
        }
    }//GEN-LAST:event_btnAddFligthActionPerformed

    private void btnDelayFlightsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelayFlightsActionPerformed
        // TODO add your handling code here:
//        String flightId = comboIDDelayFlight.getItemAt(comboIDDelayFlight.getSelectedIndex());
//        int hours = Integer.parseInt(comboHoursDelayFlight.getItemAt(comboHoursDelayFlight.getSelectedIndex()));
//        int minutes = Integer.parseInt(comboMinuteDelayFlight.getItemAt(comboMinuteDelayFlight.getSelectedIndex()));
//
//        Flight flight = null;
//        for (Flight f : this.flights) {
//            if (flightId.equals(f.getId())) {
//                flight = f;
//            }
//        }
//
//        flight.delay(hours, minutes);
        String flightId = comboIDDelayFlight.getItemAt(comboIDDelayFlight.getSelectedIndex());
        String hours = comboHoursDelayFlight.getItemAt(comboHoursDelayFlight.getSelectedIndex());
        String minutes = comboMinuteDelayFlight.getItemAt(comboMinuteDelayFlight.getSelectedIndex());

        Response response = flightController.delayFlight(flightId, hours, minutes);

        if (response.getStatus() >= 500) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } else if (response.getStatus() >= 400) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Vuelo retrasado exitosamente", JOptionPane.INFORMATION_MESSAGE);
            // Aqui no se actualiza el combobox (solo cuando se agragan nuevos vuelos).
            comboIDDelayFlight.setSelectedIndex(0);
            comboHoursDelayFlight.setSelectedIndex(0);
            comboMinuteDelayFlight.setSelectedIndex(0);
        }
    }//GEN-LAST:event_btnDelayFlightsActionPerformed

    private void btnRefreshShowMyFlightsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshShowMyFlightsActionPerformed
        loadMyFlightsTable(comboUserSelect.getSelectedItem().toString());
    }//GEN-LAST:event_btnRefreshShowMyFlightsActionPerformed

    private void btnRefreshShowPassengersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshShowPassengersActionPerformed
        loadPassengersTable();
    }//GEN-LAST:event_btnRefreshShowPassengersActionPerformed

    private void btnRefreshShowFlightsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshShowFlightsActionPerformed
        loadFlightsTable();
    }//GEN-LAST:event_btnRefreshShowFlightsActionPerformed

    private void btnRefreshShowPlanesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshShowPlanesActionPerformed
        loadPlanesTable();
    }//GEN-LAST:event_btnRefreshShowPlanesActionPerformed

    private void btnRefreshShowLocationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshShowLocationsActionPerformed
        loadLocationsTable();
    }//GEN-LAST:event_btnRefreshShowLocationsActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton13ActionPerformed

    private void comboUserSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboUserSelectActionPerformed
        updateTextFieldsFromCombo();
    }//GEN-LAST:event_comboUserSelectActionPerformed

    private void txtModelAirplaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModelAirplaneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModelAirplaneActionPerformed

    private void comboPlaneFlightRegistrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPlaneFlightRegistrationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboPlaneFlightRegistrationActionPerformed

    private void comboFlightMouseEntered(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }
    private void comboFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFlightMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_comboFlightMouseEntered

    private void comboxDepartureMinuteFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboxDepartureMinuteFlightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboxDepartureMinuteFlightActionPerformed

    private void comboBirthDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBirthDayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBirthDayActionPerformed

    private void comboHoursDelayFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboHoursDelayFlightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboHoursDelayFlightActionPerformed

    private void radioBtnUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnUserActionPerformed
        // TODO add your handling code here:
        if (radioBtnAdmi.isSelected()) {
            radioBtnAdmi.setSelected(false);
        }
        for (int i = 1; i < jTabbedPanel1.getTabCount(); i++) {
            jTabbedPanel1.setEnabledAt(i, false);
            comboUserSelect.enable(true);
        }

        jTabbedPanel1.setEnabledAt(4, true);
        jTabbedPanel1.setEnabledAt(5, true);
        jTabbedPanel1.setEnabledAt(6, true);
        jTabbedPanel1.setEnabledAt(8, true);
        jTabbedPanel1.setEnabledAt(10, true);
    }//GEN-LAST:event_radioBtnUserActionPerformed

    private void radioBtnAdmiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnAdmiActionPerformed
        // TODO add your handling code here:
        //No tocar
        if (radioBtnUser.isSelected()) {
            radioBtnUser.setSelected(false);
            comboUserSelect.setSelectedIndex(0);
            comboUserSelect.enable(false);
        }
        for (int i = 1; i < jTabbedPanel1.getTabCount(); i++) {
            jTabbedPanel1.setEnabledAt(i, true);
        }
        jTabbedPanel1.setEnabledAt(5, false);
        jTabbedPanel1.setEnabledAt(6, false);
        jTabbedPanel1.setEnabledAt(4, false);
    }//GEN-LAST:event_radioBtnAdmiActionPerformed

    private void txtIDAirplaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDAirplaneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDAirplaneActionPerformed

    private void comboIDDelayFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboIDDelayFlightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboIDDelayFlightActionPerformed

    private void txtIDFligthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDFligthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDFligthActionPerformed

    private void loadPassengersTable() {
        Response response = passengerController.getAllPassengers();
        passengerController.setObserver(tableShowAllPassengers);

        if (response.getStatus() >= 500) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (response.getStatus() >= 400) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        @SuppressWarnings("unchecked")
        List<Passenger> passengers = (List<Passenger>) response.getObject();

        DefaultTableModel model = (DefaultTableModel) tableShowAllPassengers.getModel();
        model.setRowCount(0);

        for (Passenger passenger : passengers) {
            model.addRow(new Object[]{
                passenger.getId(),
                passenger.getFullname(),
                passenger.getBirthDate(),
                passenger.calculateAge(),
                passenger.generateFullPhone(),
                passenger.getCountry(),
                passenger.getNumFlights()
            });
        }
    }

    private void loadFlightsTable() {
        Response response = flightController.getAllFlights();
        flightController.setObserver(tableShowAllFlights);
        flightController.setObserverPassenger(tableShowAllPassengers);

        if (response.getStatus() >= 500) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (response.getStatus() >= 400) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        @SuppressWarnings("unchecked")
        List<Flight> flights = (List<Flight>) response.getObject();

        DefaultTableModel model = (DefaultTableModel) tableShowAllFlights.getModel();
        model.setRowCount(0);

        for (Flight flight : flights) {
            model.addRow(new Object[]{
                flight.getId(),
                flight.getDepartureLocation().getAirportId(),
                flight.getArrivalLocation().getAirportId(),
                (flight.getScaleLocation() == null ? "-" : flight.getScaleLocation().getAirportId()),
                flight.getDepartureDate(),
                flight.calculateArrivalDate(),
                flight.getPlane().getId(),
                flight.getNumPassengers()
            });
        }
    }

    private void loadPlanesTable() {
        Response response = planeController.getAllPlanes();
        planeController.setObserver(tableShowAllPlanes);

        if (response.getStatus() >= 500) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (response.getStatus() >= 400) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        @SuppressWarnings("unchecked")
        List<Plane> planes = (List<Plane>) response.getObject();

        DefaultTableModel model = (DefaultTableModel) tableShowAllPlanes.getModel();
        model.setRowCount(0);

        for (Plane plane : planes) {
            model.addRow(new Object[]{
                plane.getId(),
                plane.getBrand(),
                plane.getModel(),
                plane.getMaxCapacity(),
                plane.getAirline(),
                plane.getNumFlights()
            });
        }
    }

    private void loadLocationsTable() {
        Response response = locationController.getAllLocations();
        locationController.setObserver(tableShowAllLocations);

        if (response.getStatus() >= 500) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (response.getStatus() >= 400) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        @SuppressWarnings("unchecked")
        List<Location> locations = (List<Location>) response.getObject();

        DefaultTableModel model = (DefaultTableModel) tableShowAllLocations.getModel();
        model.setRowCount(0);

        for (Location location : locations) {
            model.addRow(new Object[]{
                location.getAirportId(),
                location.getAirportName(),
                location.getAirportCity(),
                location.getAirportCountry()
            });
        }
    }

    private void loadMyFlightsTable(String id) {
        // Llama al controlador para obtener los vuelos del pasajero
        Response response = passengerController.getFlightsByPassengerId(id);

        // Configura el observador de la tabla (solo si es necesario aquí)
        flightController.setObserverPassengerFlight(tableShowMyFlights);

        // Manejo de errores por código de estado
        int status = response.getStatus();

        if (status >= 500) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Error del servidor", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (status >= 400) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Verifica que el objeto retornado no sea nulo ni incorrecto
        Object responseObject = response.getObject();
        if (!(responseObject instanceof List<?>)) {
            JOptionPane.showMessageDialog(this, "Respuesta inesperada del servidor", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        @SuppressWarnings("unchecked")
        List<Flight> flights = (List<Flight>) responseObject;

        // Llena la tabla con los datos
        DefaultTableModel model = (DefaultTableModel) tableShowMyFlights.getModel();
        model.setRowCount(0); // Limpia la tabla antes de insertar nuevos datos

        for (Flight flight : flights) {
            model.addRow(new Object[]{
                flight.getId(),
                flight.getDepartureDate(),
                flight.calculateArrivalDate()
            });
        }
    }

    private void updateFlightComboBox() {
        comboFlight.removeAllItems(); // Limpia los elementos anteriores
        comboIDDelayFlight.removeAllItems();

        List<Flight> flights = (List<Flight>) flightController.getAllFlights().getObject();
        for (Flight f : flights) {
            comboFlight.addItem(f.getId());
            comboIDDelayFlight.addItem(f.getId());

        }
    }

    private void updateLocationComboBox() {
        comboDepartureFlightRegistration.removeAllItems(); // Limpia los elementos anteriores
        comboArrivalFlightRegistration.removeAllItems();
        comboScaleFlightRegistration.removeAllItems();

        List<Location> locations = (List<Location>) locationController.getAllLocations().getObject();

        for (Location loc : locations) {
            comboDepartureFlightRegistration.addItem(loc.getAirportId());
            comboArrivalFlightRegistration.addItem(loc.getAirportId());
            comboScaleFlightRegistration.addItem(loc.getAirportId());
        }
    }

    private void updatePlaneComboBox() {
        comboPlaneFlightRegistration.removeAllItems();
        List<Plane> plan = (List<Plane>) planeController.getAllPlanes().getObject();
        for (Plane pla : plan) {
            comboPlaneFlightRegistration.addItem(pla.getId());
        }
    }

    private void updateUserComboBox() {
        comboUserSelect.removeAllItems();
        List<Passenger> passe = (List<Passenger>) passengerController.getAllPassengers().getObject();
        for (Passenger pass : passe) {
            comboUserSelect.addItem(String.valueOf(pass.getId()));
        }
    }

    private void updateTextFieldsFromCombo() {
        try {
            String id = comboUserSelect.getSelectedItem().toString();
            txtIDUpdate.setText(id);
            txtIDFligth.setText(id);
        } catch (Exception e) {
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> DAY5;
    private javax.swing.JComboBox<String> MONTH5;
    private javax.swing.JButton btnAddFligth;
    private javax.swing.JButton btnCreateAirplane;
    private javax.swing.JButton btnCreateFlight;
    private javax.swing.JButton btnCreateLocation;
    private javax.swing.JButton btnDelayFlights;
    private javax.swing.JButton btnRefreshShowFlights;
    private javax.swing.JButton btnRefreshShowLocations;
    private javax.swing.JButton btnRefreshShowMyFlights;
    private javax.swing.JButton btnRefreshShowPassengers;
    private javax.swing.JButton btnRefreshShowPlanes;
    private javax.swing.JButton btnRegisterPassenger;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboArrivalFlightRegistration;
    private javax.swing.JComboBox<String> comboBirthDay;
    private javax.swing.JComboBox<String> comboBirthMonth;
    private javax.swing.JTextField comboBirthYear;
    private javax.swing.JComboBox<String> comboDepartureFlightRegistration;
    private javax.swing.JComboBox<String> comboFlight;
    private javax.swing.JComboBox<String> comboHoursDelayFlight;
    private javax.swing.JComboBox<String> comboIDDelayFlight;
    private javax.swing.JComboBox<String> comboMinuteDelayFlight;
    private javax.swing.JComboBox<String> comboPlaneFlightRegistration;
    private javax.swing.JComboBox<String> comboScaleFlightRegistration;
    private javax.swing.JComboBox<String> comboUserSelect;
    private javax.swing.JComboBox<String> comboxArrivalHourFlight;
    private javax.swing.JComboBox<String> comboxArrivalMinuteFlight;
    private javax.swing.JComboBox<String> comboxDepartureDayFlight;
    private javax.swing.JComboBox<String> comboxDepartureHourFlight;
    private javax.swing.JComboBox<String> comboxDepartureMinuteFlight;
    private javax.swing.JComboBox<String> comboxDepartureMonthFlight;
    private javax.swing.JComboBox<String> comboxScaleHourFlight;
    private javax.swing.JComboBox<String> comboxlScaleMinuteFlight;
    private javax.swing.JButton jButton13;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPanel1;
    private javax.swing.JPanel panelAddToFlight;
    private javax.swing.JPanel panelAdministration;
    private javax.swing.JPanel panelDelayFlight;
    private javax.swing.JPanel panelFlightRegistration;
    private javax.swing.JPanel panelLocationRegistration;
    private javax.swing.JPanel panelPassengerRegistration;
    private core.view.PanelRound panelRound1;
    private core.view.PanelRound panelRound2;
    private core.view.PanelRound panelRound3;
    private javax.swing.JPanel panelShowAllFlights;
    private javax.swing.JPanel panelShowAllLocations;
    private javax.swing.JPanel panelShowAllPassenger;
    private javax.swing.JPanel panelShowAllPlanes;
    private javax.swing.JPanel panelShowMyFligths;
    private javax.swing.JPanel panelUpdateInfo;
    private javax.swing.JPanel panleAirplaneRegistration;
    private javax.swing.JRadioButton radioBtnAdmi;
    private javax.swing.JRadioButton radioBtnUser;
    private javax.swing.JTable tableShowAllFlights;
    private javax.swing.JTable tableShowAllLocations;
    private javax.swing.JTable tableShowAllPassengers;
    private javax.swing.JTable tableShowAllPlanes;
    private javax.swing.JTable tableShowMyFlights;
    private javax.swing.JTextField txtAirlineAirplane;
    private javax.swing.JTextField txtBirthdateUpdate;
    private javax.swing.JTextField txtBrandAirplane;
    private javax.swing.JTextField txtCodePhonePassenger;
    private javax.swing.JTextField txtCodePhoneUpdate;
    private javax.swing.JTextField txtCountryAirport;
    private javax.swing.JTextField txtCountryPassenger;
    private javax.swing.JTextField txtCountryUpdate;
    private javax.swing.JTextField txtDepartureDate;
    private javax.swing.JTextField txtFirstNameUpdate;
    private javax.swing.JTextField txtICityAirport;
    private javax.swing.JTextField txtIDAirplane;
    private javax.swing.JTextField txtIDAirport;
    private javax.swing.JTextField txtIDFlightRegistration;
    private javax.swing.JTextField txtIDFligth;
    private javax.swing.JTextField txtIDUpdate;
    private javax.swing.JTextField txtLastNamePassenger;
    private javax.swing.JTextField txtLastNameUpdate;
    private javax.swing.JTextField txtLatitudAirport;
    private javax.swing.JTextField txtLongitudAirport;
    private javax.swing.JTextField txtMaxCapacityAirplane;
    private javax.swing.JTextField txtModelAirplane;
    private javax.swing.JTextField txtNameAirport;
    private javax.swing.JTextField txtNumberPhonePassenger;
    private javax.swing.JTextField txtNumberPhoneUpdate;
    private javax.swing.JTextField txtPassengerID;
    private javax.swing.JTextField txtPassengerName;
    // End of variables declaration//GEN-END:variables
}
